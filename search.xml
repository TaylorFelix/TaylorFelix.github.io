<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>诸事不顺</title>
      <link href="/2018/04/05/Whisper-4/"/>
      <url>/2018/04/05/Whisper-4/</url>
      <content type="html"><![CDATA[<p>只有不断接触新事物才能不断认识到自己的不足</p><h3 id="关于最近"><a href="#关于最近" class="headerlink" title="关于最近"></a>关于最近</h3><p>其实很烦，去杭州面试了一次，前端。<br>可惜吧，虽然公司不大，氛围也还行，但自己真的是没有那个基础，我已经在努力写前端了，可惜是能力不足。<br>连续三个问题答不出来，我其实是很尴尬的，我都难以回忆当时是怎么走出办公楼的。<br>还有上海，企业是真的大，环境是真的好，要求是真的高。<br>我感觉自己不足的地方很多，那段时间，感觉自己真的是啥都不行。   </p><h3 id="关于答辩"><a href="#关于答辩" class="headerlink" title="关于答辩"></a>关于答辩</h3><p>很生气吧，也很后悔，干嘛要进小组项目，自己能全部答出来，然后他俩什么都不会，然后就凉了<br>我是真的无语，进入到二辩。<br>傻吊班主任，我是真的烦你。<br>二辩走过场，但也很烦。    </p><h3 id="关于住宿"><a href="#关于住宿" class="headerlink" title="关于住宿"></a>关于住宿</h3><p>或许是公司惜才（雾<br>现在住在员工宿舍，4人间只住两个，目前还算舒适。    </p><h3 id="接下来的计划"><a href="#接下来的计划" class="headerlink" title="接下来的计划"></a>接下来的计划</h3><p>买个MacBookPro，毕竟一直以来的想法还是要实现的。<br>我不会放弃前端的。    </p><p>2018/4/5</p>]]></content>
      
      <categories>
          
          <category> Whisper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript摘抄</title>
      <link href="/2018/03/27/JavaScript02/"/>
      <url>/2018/03/27/JavaScript02/</url>
      <content type="html"><![CDATA[<p>记笔记这种事从来不觉得累</p><h4 id="依旧是基础"><a href="#依旧是基础" class="headerlink" title="依旧是基础"></a>依旧是基础</h4><ul><li>toUpperCase() 把一个字符串全部变大写</li><li>toLowerCase() 把一个字符串全部变小写</li><li>indexOf() 搜索字符串出现的位置</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'hello,world'</span>;</span><br><span class="line">s.indexOf(<span class="string">'world'</span>);   <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><ul><li>substring() 返回指定索引区间的子串</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'hello world'</span>;</span><br><span class="line">s.substring(<span class="number">0</span>,<span class="number">5</span>); <span class="comment">//从索引0开始到5（不包括5），返回hello</span></span><br><span class="line">s.substring(<span class="number">7</span>); <span class="comment">//从索引7开始到结束</span></span><br></pre></td></tr></table></figure><ul><li>获取Array的长度</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'hello'</span>,<span class="literal">true</span>,<span class="literal">false</span>];</span><br><span class="line">arr.lenght; <span class="comment">//6</span></span><br></pre></td></tr></table></figure><ul><li>indexOf 搜索一个指定的元素的位置</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="string">'30'</span>,<span class="string">'xyz'</span>];</span><br><span class="line">arr.indexOf(<span class="number">10</span>); <span class="comment">//索引为0</span></span><br><span class="line">arr.indexOf(<span class="number">30</span>); <span class="comment">//无元素30，返回-1</span></span><br></pre></td></tr></table></figure><ul><li>slice 对应string的substring(),截取Array的部分元素，返回新的Array</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>];</span><br><span class="line">arr.slice(<span class="number">0</span>,<span class="number">3</span>);     <span class="comment">//['A','B','C']从0开始，到3结束，不包括3</span></span><br></pre></td></tr></table></figure><p>若不给<b>slice</b>传递任何参数，它会全部截取，可以用作复制。</p><ul><li>push和pop<br>push()和Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.push(<span class="string">'A'</span>,<span class="string">'B'</span>);</span><br><span class="line">arr; <span class="comment">// [1,2,'A','B']</span></span><br><span class="line">arr.pop();</span><br><span class="line">arr; <span class="comment">//[1,2,'A']</span></span><br></pre></td></tr></table></figure><ul><li>unshift和shift<br>往Array头部添加若干元素，使用unshift()方法,shift()方法则把Array第一个元素删除掉</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.unshift(<span class="string">'A'</span>,<span class="string">'B'</span>);</span><br><span class="line">arr; <span class="comment">// ['A','B',1,2]</span></span><br><span class="line">arr.shift();</span><br><span class="line">arr; <span class="comment">// ['B',1,2]</span></span><br></pre></td></tr></table></figure><ul><li><p>sort 对当前Array进行排序</p></li><li><p>reverse会把整个元素反转</p></li><li><p>splice方法是修改Array的万能方法<br>它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素</p></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'Microsoft'</span>,<span class="string">'Apple'</span>,<span class="string">'Yahoo'</span>,<span class="string">'AOL'</span>,<span class="string">'Excite'</span>,<span class="string">'Oracle'</span>];</span><br><span class="line"><span class="comment">//从索引2开始删除3个元素，然后再添加两个元素</span></span><br><span class="line">arr.splice(<span class="number">2</span>,<span class="number">3</span>,<span class="string">'Google'</span>,<span class="string">'Facebook'</span>);</span><br><span class="line"><span class="comment">//只删除，不添加</span></span><br><span class="line">arr.splice(<span class="number">2</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li>concat()方法把当前的Array和赢一个Array连接起来</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>];</span><br><span class="line"><span class="keyword">var</span> added = arr.concat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">added; <span class="comment">//['A','B','C',1,2,3]</span></span><br></pre></td></tr></table></figure><ul><li>join()方法<br>join()方法会把当前Array的每个元素都用指定的字符串连接起来，然后返回字符串</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.join(<span class="string">'-'</span>);  <span class="comment">// 'A-B-C-1-2-3'</span></span><br></pre></td></tr></table></figure><ul><li>多维数组<br>如果数组的某个元素又是一个Array。则可以形成多维数组</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],<span class="string">'-'</span>];</span><br></pre></td></tr></table></figure><ul><li>对象<blockquote><p>javascript的对象是一种无序的集合数据类型，它由若干键值对组成</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">'felix'</span>,</span><br><span class="line">  birth: <span class="number">1995</span>,</span><br><span class="line">  school: <span class="string">'Suchou University'</span>,</span><br><span class="line">  height: <span class="number">175</span>,</span><br><span class="line">  weight: <span class="number">73</span>,</span><br><span class="line">  score: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line">person.age;  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>对于访问不存在的属性不报错，返回undefined<br>由于Javascript的对象是动态类型，可以给一个对象添加或删除属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.age = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">delete</span> person.age;</span><br></pre></td></tr></table></figure><p>检测person是否拥有某一属性，可以用in操作符</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> person; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>in只能检测是否有，而无法判断是否是继承来的对象，可以用hsaOwnProperty来检测是否是本身拥有的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.hasOwnProperty(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure><ul><li>条件判断与循环和其他预览类似<br>关于过滤对象继承是属性</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  name: <span class="string">'felix'</span>,</span><br><span class="line">  age: <span class="number">24</span>,</span><br><span class="line">  city: <span class="string">'Beijing'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o)&#123;</span><br><span class="line">  <span class="keyword">if</span>(o.hasOwnProperty(key))&#123;</span><br><span class="line">    alert(key); <span class="comment">// 'name','age','city'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Map和Set<br>javascript的默认对象表示方式{}可以视为其他语言中的Map或Dictionary的数据结构</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">alert(<span class="string">'你的浏览器支持Map和Set'</span>);</span><br></pre></td></tr></table></figure><ul><li>Map</li></ul><blockquote><p>Map是一组键值对的结构，具有极快的查找速度</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'Micheal'</span>,<span class="number">95</span>],[<span class="string">'Bob'</span>,<span class="number">75</span>],[<span class="string">'Tracy'</span>,<span class="number">85</span>]]);</span><br><span class="line">m.get(<span class="string">'Micheal'</span>);   <span class="comment">//95</span></span><br></pre></td></tr></table></figure><p>初始化Map需要一个二维数组，或者直接初始化一个空的Map</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">//初始化一个空的Map</span></span><br><span class="line">m.set(<span class="string">'Adam'</span>,<span class="number">67</span>); <span class="comment">//添加新的key-value</span></span><br><span class="line">m.set(<span class="string">'Bob'</span>,<span class="number">59</span>);</span><br><span class="line">m.has(<span class="string">'Adam'</span>);  <span class="comment">//判断是否存在key:'Adam',返回true</span></span><br><span class="line">m.get(<span class="string">'Adam'</span>); <span class="comment">//67</span></span><br><span class="line">m.delete(<span class="string">'Adam'</span>); <span class="comment">//删除key: 'Adam'</span></span><br><span class="line">m.get(<span class="string">'Adam'</span>);  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>一个key只能对应一个value，所以，多次一个key赋值，会把前面的覆盖掉</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.set(<span class="string">'Adam'</span>,<span class="number">67</span>);</span><br><span class="line">m.set(<span class="string">'Adam'</span>,<span class="number">88</span>);</span><br><span class="line">m.get(<span class="string">'Adam'</span>);</span><br></pre></td></tr></table></figure><ul><li>set<blockquote><p>set和Map类似，也是一组key的集合，但不存储value</p></blockquote></li></ul><p>要创建一个set,需要提供一个Array并输入，或者可以直接定义一个空的set</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br></pre></td></tr></table></figure><p>重复的key会在set中被自动过滤掉，使用add和delete来给set添加或删除</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">s;</span><br><span class="line">s.delete(<span class="number">3</span>);</span><br><span class="line">s;</span><br></pre></td></tr></table></figure><ul><li>Iterable<blockquote><p>ES6引入的iterable类型，Array,Map,Set都属于iterable类型</p></blockquote></li></ul><p>具有iterable类型的集合可以通过新的for…of循环来遍历</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>];</span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="string">'x'</span>],[<span class="number">2</span>,<span class="string">'y'</span>],[<span class="number">3</span>,<span class="string">'z'</span>]]);</span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> a) &#123;      <span class="comment">//遍历Array</span></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> s) &#123;      <span class="comment">//遍历Set</span></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> m) &#123;      <span class="comment">//遍历Map</span></span><br><span class="line">  <span class="built_in">console</span>.log(x[<span class="number">0</span>] + <span class="string">'='</span> + x[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for…of和for…in的区别：<br>for…in循环由于历史问题，实际上它遍历的是对象的属性名称，那么Array也是一种对象，Array的每个元素的下标被视为属性，当我们手动给Array添加额外的元素后，for…in循环会出现额外的情况<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>];</span><br><span class="line">a.name = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">in</span> a) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);   <span class="comment">//0,1,2,name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而for…of循环解决了这个问题，它只遍历集合本身的元素<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>];</span><br><span class="line">a.name = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> a) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);    <span class="comment">//'A','B','C'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在iterable中，还有一个内置方法forEach，它接收一个函数，每次迭代就自动回调该函数<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>];</span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element,index,array</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//element指向当前元素的值</span></span><br><span class="line">  <span class="comment">//index指向当前索引</span></span><br><span class="line">  <span class="comment">//array指向Array本身</span></span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>set与Array类似，但set没有索引，回调函数的前两个参数都是元素本身<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>]);</span><br><span class="line">s.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element, sameElement, set</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Map的回调参数依次为value,key和map本身<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>,<span class="string">'x'</span>],[<span class="number">2</span>,<span class="string">'y'</span>],[<span class="number">3</span>,<span class="string">'z'</span>]]);</span><br><span class="line">m.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, key, map</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>forEach的回调函数中的参数不必全部写完，只需要Array的元素值<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>];</span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>引自：<a href="https://www.jianshu.com/p/80b612534691" title="JavaScript简明教程" target="_blank" rel="noopener">JavaScript简明教程</a>  </p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript小纪</title>
      <link href="/2018/03/26/JavaScript01/"/>
      <url>/2018/03/26/JavaScript01/</url>
      <content type="html"><![CDATA[<p>一些闲来无事打的markdown</p><h3 id="JavaScript用法"><a href="#JavaScript用法" class="headerlink" title="JavaScript用法"></a>JavaScript用法</h3><ul><li>JavaScript直接写入HTML输出流<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.write(&quot;&lt;h1&gt;这是一个标题&lt;/h1&gt;&quot;)</span><br><span class="line">document.write(&quot;&lt;p&gt;这是一个段落&lt;/p&gt;&quot;)</span><br></pre></td></tr></table></figure></li></ul><p>可直接插入到HTML中</p><ul><li><p>JavaScript对事件的反应</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type=&quot;button&quot; onclick=&quot;alert(&apos;欢迎&apos;)&quot;&gt;点击！&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>JavaScript改变HTML内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;</span><br><span class="line">JavaScript 能改变 HTML 元素的内容。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction()</span><br><span class="line">&#123;</span><br><span class="line">x=document.getElementById(&quot;demo&quot;);  // 找到元素</span><br><span class="line">x.innerHTML=&quot;Hello JavaScript!&quot;;    // 改变内容</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot;&gt;点击这里&lt;/button&gt;</span><br></pre></td></tr></table></figure></li></ul><p>DOM(Document Object Model)是用于访问HTML的W3C标准</p><ul><li><p>JavaScript改变HTML图像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function changeImage()</span><br><span class="line">&#123;</span><br><span class="line">element=document.getElementById(&apos;myimage&apos;)</span><br><span class="line">if (element.src.match(&quot;bulbon&quot;))</span><br><span class="line"> &#123;</span><br><span class="line">  element.src=&quot;/images/pic_bulboff.gif&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">else</span><br><span class="line">   &#123;</span><br><span class="line">  element.src=&quot;/images/pic_bulbon.gif&quot;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;img id=&quot;myimage&quot; onclick=&quot;changeImage()&quot;</span><br><span class="line">src=&quot;/images/pic_bulboff.gif&quot; width=&quot;100&quot; height=&quot;180&quot;&gt;</span><br><span class="line">&lt;p&gt;点击灯泡就可以打开或关闭这盏灯&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>JavaScript改变HTML样式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;</span><br><span class="line">JavaScript 能改变 HTML 元素的样式。</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction()</span><br><span class="line">&#123;</span><br><span class="line">x=document.getElementById(&quot;demo&quot;) // 找到元素</span><br><span class="line">x.style.color=&quot;red&quot;;          // 改变样式</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot;&gt;点击这里&lt;/button&gt;</span><br></pre></td></tr></table></figure></li><li><p>JavaScript验证输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input id=&quot;demo&quot; type=&quot;text&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction()</span><br><span class="line">&#123;</span><br><span class="line">var x=document.getElementById(&quot;demo&quot;).value;</span><br><span class="line">if(x==&quot;&quot;||isNaN(x))</span><br><span class="line">&#123;</span><br><span class="line">alert(&quot;不是数字&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="JavaScript输出"><a href="#JavaScript输出" class="headerlink" title="JavaScript输出"></a>JavaScript输出</h3><ul><li>使用window.alert()弹出警告框</li><li>使用document.write()将内容写入到HTML</li><li>使用innerHTML写入到HTML元素</li><li>使用console.log()写入到浏览器的控制台</li></ul><h3 id="JavaScript语法"><a href="#JavaScript语法" class="headerlink" title="JavaScript语法"></a>JavaScript语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var x, y, z;</span><br><span class="line">x = 5;</span><br><span class="line">y = 6;</span><br><span class="line">z = (x + y) * 10;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML = z;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>变量，操作符，关键字。</p><p><strong>JavaScript函数</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function myFunction(a, b) &#123;</span><br><span class="line">   return a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对代码进行换行，采用反斜杠<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.write(&quot;你好 \ 世界&quot;);</span><br></pre></td></tr></table></figure></p><ul><li>变量</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button onclick=&quot;myFunction()&quot;&gt;点击这里&lt;/button&gt;</span><br><span class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction()&#123;</span><br><span class="line">var carname=&quot;Volvo&quot;;</span><br><span class="line">document.getElementById(&quot;demo&quot;).innerHTML=carname;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>创建名为carname的变量，赋值Volvo，然后将值放入demo里，插入到HTML中。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>最近着手换一套博客主题</title>
      <link href="/2018/03/20/Whisper-3/"/>
      <url>/2018/03/20/Whisper-3/</url>
      <content type="html"><![CDATA[<p>应该架构还是采用Hexo</p><h4 id="关于为什么会有这个想法"><a href="#关于为什么会有这个想法" class="headerlink" title="关于为什么会有这个想法"></a>关于为什么会有这个想法</h4><p>或许是累了？或许是厌倦了随机缩略图，准备更大气一点<br>目前还在四处收集东西，争取早日完工吧<br>可怜我又要重新建分支了–</p>]]></content>
      
      <categories>
          
          <category> Whisper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>转换思路，抛弃拼接，参数传值</title>
      <link href="/2018/03/19/SqlServer01/"/>
      <url>/2018/03/19/SqlServer01/</url>
      <content type="html"><![CDATA[<p>拼接方式写Sql语句最近真是让我头大啊</p><h3 id="最近在写有关SqlServer增删改查多表联动"><a href="#最近在写有关SqlServer增删改查多表联动" class="headerlink" title="最近在写有关SqlServer增删改查多表联动"></a>最近在写有关SqlServer增删改查多表联动</h3><p>拼接有点烦啊，虽然构建起来简单，但是问题真是层出不穷（或许是因为我太菜了<br>考虑了好多遍，然后把全部都改成了参数方式，话说真的简单了很多<br>个人理解可能会有点青涩，但所有不都是从青涩起步的<br>话不多说，先贴上我写的来看看<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (e.CommandName == &quot;Delete&quot;)</span><br><span class="line">&#123;</span><br><span class="line">  string ProgramName = Grid1.DataKeys[e.RowIndex][0].ToString();</span><br><span class="line">  SqlParameter[] sqlparams = new SqlParameter[1];</span><br><span class="line">  sqlparams[0] = new SqlParameter(&quot;ProgramName&quot;, ProgramName);</span><br><span class="line">  string sql = &quot;select ProgramName,Manager from ProgramError_ProgramManager Where ProgramName=@ProgramName&quot;;</span><br><span class="line">  DataTable dt = DbHelperSQL.Query(sql, sqlparams).Tables[0];</span><br><span class="line">  if (dt.Rows.Count == 0)</span><br><span class="line">    &#123;</span><br><span class="line">      string sql2 = &quot;delete from ProgramError_ProgramName where ProgramName=@ProgramName&quot;;</span><br><span class="line">      DbHelperSQL.ExecuteSql(sql2, sqlparams);</span><br><span class="line">      string sql3 = &quot;delete from ProgramError_AlertPeople where ProgramName=@ProgramName&quot;;</span><br><span class="line">      DbHelperSQL.ExecuteSql(sql3, sqlparams);</span><br><span class="line">      Grid1Bind();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      Alert.Show(&quot;該類型下已有對應管理員，請先刪除類型對應管理員再執行刪除操作！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一个简单的条件判断，当执行删除操作时，先判断另一张表是否存在对应管理员，存在则不允许删除<br>本来准备Sql2和Sql3用一句解决的，但是测试几遍都没成，还需要多加学习啊- -<br>还有一个关于分页的写法，记录一下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sql = &quot;select ID,ProgramName,Manager from ProgramError_ProgramManager&quot;;</span><br><span class="line">string sql2 = &quot;select isnull(count(*),0) from (&quot; + sql + &quot;) ProgramError_ProgramManager&quot;;</span><br><span class="line">DataTable dtcount = DbHelperSQL.Query(sql2).Tables[0];</span><br><span class="line">Grid1.RecordCount = Convert.ToInt32(dtcount.Rows[0][0].ToString());</span><br><span class="line"></span><br><span class="line">int startIndex = Grid1.PageIndex * Convert.ToInt32(ddlGridPageSize.SelectedValue) + 1;</span><br><span class="line">int EndIndex = (Grid1.PageIndex + 1) * Convert.ToInt32(ddlGridPageSize.SelectedValue);</span><br><span class="line">sql = &quot;SELECT * FROM (SELECT ROW_NUMBER() OVER (order by ProgramName) as row,* from (&quot; + sql + &quot; )A )B where row between &quot; + startIndex.ToString() + &quot; and &quot; + EndIndex.ToString();</span><br><span class="line">DataSet ds = DbHelperSQL.Query(sql);</span><br><span class="line">Grid1.DataSource = ds.Tables[0];</span><br><span class="line">Grid1.DataBind();</span><br><span class="line"></span><br><span class="line">sql = &quot;select ProgramName from ProgramError_ProgramName&quot;;</span><br><span class="line">DataTable dt = DbHelperSQL.Query(sql).Tables[0];</span><br><span class="line">ddl_ProgramName.DataTextField = &quot;ProgramName&quot;;</span><br><span class="line">ddl_ProgramName.DataValueField = &quot;ProgramName&quot;;</span><br><span class="line">ddl_ProgramName.DataSource = dt;</span><br><span class="line">ddl_ProgramName.DataBind();</span><br></pre></td></tr></table></figure></p><p>这个学习过程，说起来是挺轻松的，可能只是最简单的sql操作，还是学到了不少，很开心</p>]]></content>
      
      <categories>
          
          <category> SqlServer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>备案那些事儿</title>
      <link href="/2018/03/19/Whisper-2/"/>
      <url>/2018/03/19/Whisper-2/</url>
      <content type="html"><![CDATA[<p>最近在忙备案的事情</p><h2 id="真的过程是很繁琐"><a href="#真的过程是很繁琐" class="headerlink" title="真的过程是很繁琐"></a>真的过程是很繁琐</h2><p>这前后差不多一个星期，终于把材料寄了过去<br>话说阿里云速度是挺快的，照片审核秒过<br>不过我有个尴尬的地方，我只买了个轻量服务器，没有把项目部署到上面<br>如果查网站内容我这就坑了–<br>我真的只是准备目前把域名解析到GitHub</p><h2 id="对了，域名是"><a href="#对了，域名是" class="headerlink" title="对了，域名是"></a>对了，域名是</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firelight.top</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Whisper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备案 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyResume</title>
      <link href="/2018/03/19/MyResume/"/>
      <url>/2018/03/19/MyResume/</url>
      <content type="html"><![CDATA[<p>很久没做过简历了</p><h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><ul><li>杨金科/男/1995</li><li>本科/苏州大学应用技术学院软件工程（嵌入式培养） </li><li>应届生</li><li>技术博客：<a href="https://taylorfelix.github.io/" target="_blank" rel="noopener">https://taylorfelix.github.io/</a></li><li>Github：<a href="https://github.com/TaylorFelix" target="_blank" rel="noopener">https://github.com/TaylorFelix</a></li><li>期望职位：WEB前端工程师</li><li>期望薪资：税前月薪6k~10k</li><li>联系电话：18896825060<ul><li>Email：<a href="mailto:m18896825060@163.com" target="_blank" rel="noopener">m18896825060@163.com</a></li><li>微信：a1023614047</li></ul></li></ul><h1 id="实习情况"><a href="#实习情况" class="headerlink" title="实习情况"></a>实习情况</h1><h2 id="昆山淳华科技公司-（-2018年1月-2018年4月-）"><a href="#昆山淳华科技公司-（-2018年1月-2018年4月-）" class="headerlink" title="昆山淳华科技公司 （ 2018年1月 ~ 2018年4月 ）"></a>昆山淳华科技公司 （ 2018年1月 ~ 2018年4月 ）</h2><h2 id="企业微信Oauth2验证"><a href="#企业微信Oauth2验证" class="headerlink" title="企业微信Oauth2验证"></a>企业微信Oauth2验证</h2><p>结合企业微信官方开发文档，采用php调用API，实现了企业微信加入先跳转到企业自己页面进行身份验证，验证成功后加入企业微信。在这个项目中，关于接口调用及验证实现加深了我对API的理解及Json的使用。</p><h2 id="C-SqlServer进行WEB页面维护"><a href="#C-SqlServer进行WEB页面维护" class="headerlink" title="C#+SqlServer进行WEB页面维护"></a>C#+SqlServer进行WEB页面维护</h2><p>接手到此项目，从对C#一无所知，到熟练构建WEB页面与数据库多表查询删除操作，使我对于数据库操作了解更加深入。</p><h1 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h1><h2 id="基于SpringMVC水上乐园电子门票后台系统"><a href="#基于SpringMVC水上乐园电子门票后台系统" class="headerlink" title="基于SpringMVC水上乐园电子门票后台系统"></a>基于SpringMVC水上乐园电子门票后台系统</h2><p>毕业设计课题，小组开发，主要负责UI，使用H5+Bootstrap进行页面构建，参与数据表设计。</p><h2 id="个人博客（TaylorFelix-github-io）"><a href="#个人博客（TaylorFelix-github-io）" class="headerlink" title="个人博客（TaylorFelix.github.io）"></a>个人博客（TaylorFelix.github.io）</h2><p>个人博客搭建，博客功能完善，Markdown博客书写，域名备案。</p><h1 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h1><ul><li>Web开发：PHP</li><li>前端框架：Bootstrap/HTML5/Vuejs</li><li>数据库相关：MySQL/SqlServer</li><li>版本管理、文档和自动化部署工具：Git/Composer</li></ul><hr><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>感谢您花时间阅读我的简历，期待能够得到同您面谈/面试的机会。</p>]]></content>
      
      <categories>
          
          <category> 简历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简历 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Object-C入门(三)</title>
      <link href="/2018/03/12/Object-C03/"/>
      <url>/2018/03/12/Object-C03/</url>
      <content type="html"><![CDATA[<p>循环结构的使用似乎都是一个样子  </p><h4 id="简直都让人不想写"><a href="#简直都让人不想写" class="headerlink" title="简直都让人不想写"></a>简直都让人不想写</h4><ul><li>for<ul><li>先求初始表达式的值</li><li>求循环条件的值</li><li>执行组成循环体的程序语句</li><li>求循环表达式的值</li><li>返回到第二步<br>键盘输入</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scanf ();</span><br></pre></td></tr></table></figure><p>嵌套的for循环</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for ()&#123;</span><br><span class="line">  for()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环的变体</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(i=0,j=100;i&lt;10;++i,j-=10)</span><br></pre></td></tr></table></figure><ul><li>while</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while ()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>do<br>do语句只是while语句的简单转置，它把循环条件放在循环的结尾，而不是开头。</p></li><li><p>break语句<br>满足特定条件就退出循环</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">break;</span><br></pre></td></tr></table></figure><ul><li><p>continue语句<br>与break语句类似，但它不会使循环结束，会跳过该句直到循环结尾处之间的所有语句。</p></li><li><p>switch</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch ()</span><br><span class="line">&#123;</span><br><span class="line">  case value1:</span><br><span class="line"></span><br><span class="line">     break;</span><br><span class="line">  case value2:</span><br><span class="line"></span><br><span class="line">     break;</span><br><span class="line">  default:</span><br><span class="line"></span><br><span class="line">     break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Object-C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Object-C入门(二)</title>
      <link href="/2018/03/12/Object-C02/"/>
      <url>/2018/03/12/Object-C02/</url>
      <content type="html"><![CDATA[<p>数据类型及常量</p><h2 id="简单梳理一下"><a href="#简单梳理一下" class="headerlink" title="简单梳理一下"></a>简单梳理一下</h2><ul><li><p>int类型<br>整数常量由一个或多个数字的序列组成。 序列前的负号表示该值是负数。</p></li><li><p>float类型<br>声明为float类型的变量可以存储包含小数位的值，如果要显示浮点值，可用NSLog转换字符%f或者%g。<br>浮点常量也能用所谓的科学计数法来表示。值1.7e4代表1.7*10^4。</p></li><li><p>char类型<br>char变量可存储单个字符。将字符放入一对单引号中就能得到字符常量。<br>‘\n’换行符是一个合法的字符常量。</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">int    integerVal =100;</span><br><span class="line">float  floatingVar =331.79;</span><br><span class="line">double doubleVar =8.44e+11;</span><br><span class="line">char   charVar =&apos;w&apos;;</span><br><span class="line"></span><br><span class="line">NSLog (@&quot;integerVal =%i&quot;,integerVal);</span><br><span class="line">NSLog (@&quot;floatingVar =%f&quot;,floatingVar);</span><br><span class="line">NSLog (@&quot;doubleVar =%e&quot;,doubleVar);</span><br><span class="line">NSLog (@&quot;doubleVar =%g&quot;,doubleVar);</span><br><span class="line">NSLog (@&quot;charVar =%c&quot;,charVar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>限定词：long,long long,short,unsigned,signed</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">long int factorial;</span><br></pre></td></tr></table></figure><p>这句将变量factorial声明为Long的整形变量。</p><ul><li>id类型<br>id数据类型可存储任何类型的对象。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id graphicObject;</span><br></pre></td></tr></table></figure><p>将graphicObject声明为id类型的变量。可声明方法使其具有id类型的返回值，如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-(id) newObject: (int) type;</span><br></pre></td></tr></table></figure><p>这个程序行声明了一个名为newObject的实例方法，它具有type的单个整形参数并有id类型的返回值。</p><h2 id="算术表达式"><a href="#算术表达式" class="headerlink" title="算术表达式"></a>算术表达式</h2><ul><li><p>运算符的优先级<br>如加减乘除一致优先级</p></li><li><p>整数运算和一元负号运算符<br>与其他运算符相比，一元负号运算符具有更高的优先级。</p></li><li><p>模运算符 %<br>模运算符的优先级与乘法和除法的优先级相等。</p></li><li><p>整型值和浮点值的相互转换</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i1 = f1; //浮点数到整数的转换</span><br><span class="line">NSLog(@&quot;%f assigned to an int produces %i&quot;,f1,i1);</span><br><span class="line"></span><br><span class="line">f1 = i2; //整数到浮点数的转换</span><br><span class="line">NSLog(@&quot;%i assigned to a float produces %f&quot;,i2,f1);</span><br></pre></td></tr></table></figure><ul><li>类型转换运算符<br>类型转换运算符通常用于将一般id类型的对象转换成特定类的对象。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id myNumber;</span><br><span class="line">Fraction *myFraction;</span><br><span class="line">...</span><br><span class="line">myFraction = (Fraction *) myNumber;</span><br></pre></td></tr></table></figure><p>将id变量myNumber的值强制类型转换成一个Fraction对象。转换结果赋给Fraction变量myFraction。</p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>Object-C语言允许使用以下的一般格式将算术运算符和赋值运算符合并到一起</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">op=</span><br></pre></td></tr></table></figure><p>在这个格式中，op是任何算术运算符，还可以是任何用于移位和屏蔽操作的位运算符。</p><h2 id="Calculator类"><a href="#Calculator类" class="headerlink" title="Calculator类"></a>Calculator类</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface Calculator: NSObject</span><br><span class="line"></span><br><span class="line">-(void) setAccumulator: (double) value;</span><br><span class="line">-(void) clear;</span><br><span class="line">-(double) accumulator;</span><br><span class="line"></span><br><span class="line">-(void) add: (double) value;</span><br><span class="line">-(void) subtract: (double) value;</span><br><span class="line">-(void) multiply: (double) value;</span><br><span class="line">-(void) divide: (double) value;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation Calculator</span><br><span class="line">&#123;</span><br><span class="line">    double accumulator;</span><br><span class="line">&#125;</span><br><span class="line">-(void) setAccumulator:(double)value</span><br><span class="line">&#123;</span><br><span class="line">    accumulator=value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void) clear</span><br><span class="line">&#123;</span><br><span class="line">    accumulator = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(double) accumulator</span><br><span class="line">&#123;</span><br><span class="line">    return accumulator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void) add:(double) value</span><br><span class="line">&#123;</span><br><span class="line">    accumulator +=value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void) subtract:(double)value</span><br><span class="line">&#123;</span><br><span class="line">    accumulator -=value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void) multiply:(double)value</span><br><span class="line">&#123;</span><br><span class="line">    accumulator *=value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void) divide:(double)value</span><br><span class="line">&#123;</span><br><span class="line">    accumulator /=value;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">int main (int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        Calculator *deskCalc = [[Calculator alloc] init];</span><br><span class="line"></span><br><span class="line">        [deskCalc setAccumulator:100.0];</span><br><span class="line">        [deskCalc add:200.];</span><br><span class="line">        [deskCalc divide:15.0];</span><br><span class="line">        [deskCalc subtract:10.0];</span><br><span class="line">        [deskCalc multiply:5];</span><br><span class="line">        NSLog(@&quot;The result is %g&quot;,[deskCalc accumulator]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Object-C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Object-C入门(一)</title>
      <link href="/2018/03/11/Object-C01/"/>
      <url>/2018/03/11/Object-C01/</url>
      <content type="html"><![CDATA[<p>object-c中类、对象和方法的简单应用与实现</p><h2 id="简单的应用"><a href="#简单的应用" class="headerlink" title="简单的应用"></a>简单的应用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//main.m</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">//----@interface部分----</span><br><span class="line">//用于描述类和类的方法,为类声明实例变量</span><br><span class="line"></span><br><span class="line">@interface Fraction: NSObject</span><br><span class="line"></span><br><span class="line">-(void) print;     //通知编译器这是一个实例方法</span><br><span class="line">//-(int) currentAge 可以声明返回值的类型。</span><br><span class="line">-(void) setNumerator:(int) n;</span><br><span class="line">//不返回值的实例方法，定义参数名n，将方法传递给n这个整形参数，且没有返回值。</span><br><span class="line">-(void) setDenominator:(int) d;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//----@implementation部分----</span><br><span class="line">//用于描述数据（类对象的实例变量存储的数据）</span><br><span class="line">@implementation Fraction</span><br><span class="line">&#123;</span><br><span class="line">    int numerator;</span><br><span class="line">    int denominator;</span><br><span class="line">    //指定哪种类型的数据将要存储到Fraction中</span><br><span class="line">&#125;</span><br><span class="line">-(void) print;</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;%i/%i&quot;,numerator,denominator);</span><br><span class="line">&#125;</span><br><span class="line">-(void) setNumerator: (int) n</span><br><span class="line">&#123;</span><br><span class="line">    numerator = n;</span><br><span class="line">&#125;</span><br><span class="line">-(void) setDenominator: (int) d</span><br><span class="line">&#123;</span><br><span class="line">    denominator = d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">//----program部分----</span><br><span class="line">//实现程序预期的目的，包含解决特定问题的代码，可跨越多个文件</span><br><span class="line">int main (int argc, char * argv[])</span><br><span class="line">&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        Fraction *myFraction;</span><br><span class="line">        //*表明myFraction是Fraction对象的引用（或指针）</span><br><span class="line"></span><br><span class="line">        //创建一个分数实例</span><br><span class="line">        myFraction = [Fraction alloc];</span><br><span class="line">        //alloc为新分数分配内存存储空间</span><br><span class="line">        myFraction = [myFraction init];</span><br><span class="line">        //初始化实例变量</span><br><span class="line">        //简写形式 Fraction *myFraction = [[Fraction alloc] init];</span><br><span class="line"></span><br><span class="line">        //设置分数为1/3</span><br><span class="line">        [myFraction setNumerator: 1];</span><br><span class="line">        [myFraction setDenominator: 3];</span><br><span class="line"></span><br><span class="line">        //使用打印方法打印结果</span><br><span class="line">        NSLog(@&quot;The value of myFraction is:&quot;);</span><br><span class="line">        [myFraction print];</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Object-C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-C </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于sql server的增删改查</title>
      <link href="/2018/03/10/Csharp-1/"/>
      <url>/2018/03/10/Csharp-1/</url>
      <content type="html"><![CDATA[<p>一个简单的报警维护页面</p><h4 id="采用Fineui-C-SQLServer完成"><a href="#采用Fineui-C-SQLServer完成" class="headerlink" title="采用Fineui,C#,SQLServer完成"></a>采用Fineui,C#,SQLServer完成</h4><blockquote><p>开发工具 Visual Studio</p></blockquote><h3 id="开发成果"><a href="#开发成果" class="headerlink" title="开发成果"></a>开发成果</h3><p><img src="http://upload-images.jianshu.io/upload_images/10826501-09924404c1854c3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="报警维护页面"></p><p>如图所有功能均可实现</p><ul><li>输入类别（必须）和备注后点击新增将数据插入数据库并呈现在下表中<br><img src="http://upload-images.jianshu.io/upload_images/10826501-1bd3587d25111320.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="若该类别已存在，则提示不要增加"></li><li>输入关键字可进行查询，查询结果在下表中展示<br><img src="http://upload-images.jianshu.io/upload_images/10826501-d2ebe427285f168e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查询页面支持单个字体"></li><li>点击删除，提示是否删除，确定后删除成功<br><img src="http://upload-images.jianshu.io/upload_images/10826501-c6c50f85075bc448.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提示是否删除"></li></ul><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><ul><li><p>首先添加一个新建项<br><img src="http://upload-images.jianshu.io/upload_images/10826501-441a9f4bf6ca6099.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="私命名为MachineWarningProgramName"></p></li><li><p>构造前端页面（基于FineUI）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;</span><br><span class="line">  &lt;f:PageManager ID=&quot;PageManager1&quot; AutoSizePanelID=&quot;Panel1&quot; runat=&quot;server&quot; /&gt;</span><br><span class="line">    &lt;f:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; BodyPadding=&quot;5px&quot; ShowBorder=&quot;false&quot; Layout=&quot;VBox&quot; BoxConfigAlign=&quot;Stretch&quot; BoxConfigPosition=&quot;Start&quot; ShowHeader=&quot;false&quot; Title=&quot;報警維護&quot;&gt;</span><br><span class="line">      &lt;Items&gt;                </span><br><span class="line">        &lt;f:Form ID=&quot;Form&quot; runat=&quot;server&quot; ShowHeader=&quot;false&quot; ShowBorder=&quot;false&quot; LabelWidth=&quot;90px&quot;&gt;</span><br><span class="line">          &lt;Rows&gt;</span><br><span class="line">            &lt;f:FormRow&gt;</span><br><span class="line">              &lt;Items&gt;</span><br><span class="line">                &lt;f:Label ID=&quot;Label2&quot; Text=&quot;&quot; Width=&quot;100&quot; MarginRight=&quot;8&quot; runat=&quot;server&quot;&gt;</span><br><span class="line">                &lt;/f:Label&gt;</span><br><span class="line">              &lt;/Items&gt;</span><br><span class="line">            &lt;/f:FormRow&gt;</span><br><span class="line">          &lt;/Rows&gt;</span><br><span class="line">        &lt;/f:Form&gt;</span><br><span class="line">      &lt;f:Grid ID=&quot;Grid1&quot; runat=&quot;server&quot; BoxFlex=&quot;1&quot; ShowBorder=&quot;true&quot; ShowHeader=&quot;false&quot; DataKeyNames=&quot;ProgramName,ErrorMessage&quot; EnableRowDoubleClickEvent=&quot;true&quot; OnRowCommand=&quot;Grid1_RowCommand&quot;  OnRowDoubleClick=&quot;Grid1_RowDoubleClick&quot;&gt;</span><br><span class="line">        &lt;Toolbars&gt;</span><br><span class="line">          &lt;f:Toolbar ID=&quot;Toolbar1&quot; runat=&quot;server&quot;&gt;</span><br><span class="line">            &lt;Items&gt;</span><br><span class="line">              &lt;f:TextBox ID=&quot;tbProgramName&quot; runat=&quot;server&quot; Label=&quot;報警類別&quot; LabelWidth=&quot;70px&quot; Width=&quot;260px&quot; TabIndex=&quot;1&quot;&gt;&lt;/f:TextBox&gt;</span><br><span class="line">              &lt;f:TextBox ID=&quot;tbErrorMessage&quot; runat=&quot;server&quot; Label=&quot;信息備註&quot; LabelWidth=&quot;70px&quot; Width=&quot;260px&quot; TabIndex=&quot;1&quot;&gt;&lt;/f:TextBox&gt;</span><br><span class="line">            &lt;/Items&gt;</span><br><span class="line">          &lt;/f:Toolbar&gt;</span><br><span class="line">          &lt;f:Toolbar ID=&quot;Toolbar2&quot; runat=&quot;server&quot;&gt;</span><br><span class="line">            &lt;Items&gt;</span><br><span class="line">              &lt;f:Button ID=&quot;btnSave&quot; runat=&quot;server&quot; Text=&quot;新增&quot; OnClick=&quot;btnSave_Click&quot; Icon=&quot;Add&quot; ValidateForms=&quot;Form&quot; &gt;&lt;/f:Button&gt;</span><br><span class="line">              &lt;f:Button ID=&quot;btnSearch&quot; runat=&quot;server&quot; Text=&quot;查詢&quot; OnClick=&quot;btnSearch_Click&quot; Icon=&quot;Zoom&quot; &gt;&lt;/f:Button&gt;</span><br><span class="line">              &lt;f:HiddenField ID=&quot;hidLx&quot; runat=&quot;server&quot;&gt;&lt;/f:HiddenField&gt; </span><br><span class="line">              &lt;f:HiddenField ID=&quot;HidCb&quot; runat=&quot;server&quot;&gt;&lt;/f:HiddenField&gt; </span><br><span class="line">              &lt;f:HiddenField ID=&quot;HidQxDm&quot; runat=&quot;server&quot;&gt;&lt;/f:HiddenField&gt;</span><br><span class="line">              &lt;f:HiddenField ID=&quot;HidDeptId&quot; runat=&quot;server&quot;&gt;&lt;/f:HiddenField&gt; </span><br><span class="line">            &lt;/Items&gt;</span><br><span class="line">          &lt;/f:Toolbar&gt;</span><br><span class="line">        &lt;/Toolbars&gt;</span><br><span class="line">        &lt;Columns&gt;</span><br><span class="line">          &lt;f:RowNumberField Width=&quot;40px&quot; /&gt;                        </span><br><span class="line">          &lt;f:BoundField DataField=&quot;ProgramName&quot; HeaderText=&quot;報警類別&quot;  Width=&quot;100px&quot;  HeaderTextAlign=&quot;Center&quot;  /&gt;</span><br><span class="line">          &lt;f:BoundField DataField=&quot;ErrorMessage&quot; HeaderText=&quot;信息維護&quot; Width=&quot;100px&quot;  HeaderTextAlign=&quot;Center&quot; /&gt;</span><br><span class="line">          &lt;f:BoundField DataField=&quot;C_USER&quot; HeaderText=&quot;錄入人&quot; Width=&quot;160px&quot;  HeaderTextAlign=&quot;Center&quot; /&gt;                  </span><br><span class="line">          &lt;f:BoundField DataField=&quot;C_Date&quot; HeaderText=&quot;錄入時間&quot; Width=&quot;140px&quot; DataFormatString=&quot;&#123;0:yyyy/MM/dd&#125;&quot; HeaderTextAlign=&quot;Center&quot; /&gt;</span><br><span class="line">          &lt;f:BoundField DataField=&quot;U_USER&quot; HeaderText=&quot;更新人&quot; Width=&quot;160px&quot;  HeaderTextAlign=&quot;Center&quot;  /&gt;</span><br><span class="line">          &lt;f:BoundField DataField=&quot;U_Date&quot; HeaderText=&quot;更新時間&quot; Width=&quot;160px&quot; DataFormatString=&quot;&#123;0:yyyy/MM/dd&#125;&quot;  HeaderTextAlign=&quot;Center&quot; /&gt; </span><br><span class="line">          &lt;f:LinkButtonField ColumnID=&quot;deleteField&quot; TextAlign=&quot;Center&quot; Icon=&quot;Delete&quot; HeaderText=&quot;刪除&quot; ToolTip=&quot;刪除&quot; ConfirmText=&quot;確定刪除？&quot; ConfirmTarget=&quot;Self&quot; CommandName=&quot;Delete&quot; Width=&quot;100px&quot;&gt;&lt;/f:LinkButtonField&gt;</span><br><span class="line">        &lt;/Columns&gt;</span><br><span class="line">      &lt;/f:Grid&gt;              </span><br><span class="line">    &lt;/Items&gt;</span><br><span class="line">  &lt;/f:Panel&gt;      </span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li></ul><p>前端构造也就都那么回事，看着长主要是在做格式。</p><ul><li>功能实现<br>通过前端各个数据的绑定，进行后端数据的书写。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void Page_Load(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">  Grid1Bind();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void Grid1Bind()</span><br><span class="line">&#123;</span><br><span class="line">  string strDept = &quot; select ProgramName,ErrorMessage,C_user,C_DATE,U_user,U_DATE from  ProgramError_ProgramName where ProgramName like &apos;%&quot; + tbProgramName.Text.Trim() + &quot;%&apos; and ErrorMessage like &apos;%&quot; + tbErrorMessage.Text.Trim() + &quot;%&apos;&quot;;</span><br><span class="line">  DataTable dt = DbHelperSQL.Query(strDept).Tables[0];</span><br><span class="line">  Grid1.DataSource = dt;</span><br><span class="line">  Grid1.DataBind();</span><br><span class="line">  // 查詢programerror_programname表內所有programname數據</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void Grid1_RowCommand(object sender, GridCommandEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">  DataTable dt = Grid1.DataSource as DataTable;</span><br><span class="line">  string programname = Grid1.DataKeys[e.RowIndex][0].ToString();</span><br><span class="line">  // 選取programname所在行</span><br><span class="line">  if (e.CommandName == &quot;Delete&quot;)</span><br><span class="line">  &#123;</span><br><span class="line">    string sql = &quot;delete from ProgramError_ProgramName where programName =&apos;&quot; + dt.Rows[e.RowIndex][&quot;programName&quot;].ToString() + &quot;&apos;&quot;;</span><br><span class="line">    DbHelperSQL.ExecuteSql(sql);</span><br><span class="line">    Grid1Bind();</span><br><span class="line">  &#125;;</span><br><span class="line">  // command事件觸發delete，執行刪除數據</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void btnSearch_Click(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">  Grid1Bind();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void btnSave_Click(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">  if (tbProgramName.Text.Trim() == &quot;&quot;)</span><br><span class="line">  &#123;</span><br><span class="line">    Alert.Show(&quot;報警類別不能為空!&quot;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  StringBuilder sb = new StringBuilder();</span><br><span class="line">  if (hidLx.Text.Trim() == &quot;&quot;)</span><br><span class="line">  &#123;</span><br><span class="line">    string strSql = &quot;select * from [ProgramError_ProgramName] where   ProgramName =&apos;&quot; + tbProgramName.Text.Trim() + &quot;&apos; and [ErrorMessage]=&apos;&quot; + tbErrorMessage.Text.Trim().Trim() + &quot; &apos; &quot;;</span><br><span class="line">    DataTable dt = DbHelperSQL.Query(strSql).Tables[0];</span><br><span class="line">    if (dt.Rows.Count &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">      Alert.Show(&quot;要保存的報警類別已存在，請不要重新增加！&quot;);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    sb.AppendLine(&quot; insert into ProgramError_ProgramName (ProgramName,ErrorMessage,C_user,C_DATE) &quot;);</span><br><span class="line">    sb.AppendLine(&quot; values (N&apos;&quot; + tbProgramName.Text.Trim() + &quot;&apos;,&apos;&quot; + tbErrorMessage.Text.Trim().Trim() + &quot;&apos; &quot;);</span><br><span class="line">    sb.AppendLine(&quot;  ,&apos;&quot; + GetIdentityName() + &quot;&apos;,getdate() )&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    sb.AppendLine(&quot; update ProgramError_ProgramName  set ProgramName =&apos;&quot; + tbProgramName.Text.Trim() + &quot;&apos;,ErrorMessage=&apos;&quot; + tbErrorMessage.Text.Trim().Trim() + &quot;&apos; &quot;);</span><br><span class="line">    sb.AppendLine(&quot; ,U_USER=&apos;&quot; + GetIdentityName() + &quot;&apos;,U_DATE=getdate() &quot;);</span><br><span class="line">    sb.AppendLine(&quot; where ProgramName =&apos;&quot; + HidCb.Text.Trim() + &quot;&apos;  &quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  try</span><br><span class="line">  &#123;</span><br><span class="line">    int rows = DbHelperSQL.ExecuteSql(sb.ToString());</span><br><span class="line">    if (rows &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">      tbProgramName.Text = &quot;&quot;;</span><br><span class="line">      tbProgramName.Enabled = true;</span><br><span class="line">      tbErrorMessage.Text = &quot;&quot;;</span><br><span class="line">      hidLx.Text = &quot;&quot;;</span><br><span class="line">      Grid1Bind();</span><br><span class="line">      Alert.Show(&quot;添加成功！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  catch (Exception ex)</span><br><span class="line">  &#123;</span><br><span class="line">    Alert.Show(&quot;添加失敗:&quot; + ex);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected void Grid1_RowDoubleClick(object sender, GridRowClickEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">  hidLx.Text = &quot;1&quot;;</span><br><span class="line">  HidCb.Text = Grid1.DataKeys[e.RowIndex][0].ToString();</span><br><span class="line">  tbProgramName.Enabled = false;</span><br><span class="line">  tbProgramName.Text = Grid1.DataKeys[e.RowIndex][0].ToString();</span><br><span class="line">  tbErrorMessage.Text = Grid1.DataKeys[e.RowIndex][1].ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码真多–<br>用了将近一星期吸收理解sql server</p><p>have a nice day!</p>]]></content>
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记一次企业微信二次验证开发</title>
      <link href="/2018/03/06/Php-1/"/>
      <url>/2018/03/06/Php-1/</url>
      <content type="html"><![CDATA[<p>如何合理运用微信api的二次验证与回调</p><h2 id="关于二次验证"><a href="#关于二次验证" class="headerlink" title="关于二次验证"></a>关于二次验证</h2><p>首先要确保企业微信开启了二次验证<br><img src="http://upload-images.jianshu.io/upload_images/10826501-e3bded281c2c7d02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p><p>构造链接<br><img src="http://upload-images.jianshu.io/upload_images/10826501-82fd9a43a28178a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></p><p>关于这方面的东西太多了，可以去企业微信开发文档查看，这里不再多加赘述。</p><p>主要聊一下开发的部分。</p><h2 id="应用于实际需求"><a href="#应用于实际需求" class="headerlink" title="应用于实际需求"></a>应用于实际需求</h2><p>仅仅是开启企业通讯录然后进行导入是不切实际的，不同公司数据库格式也不同，导出问题也是头疼。<br>幸好公司大手结合网上大佬给出的验证（在此膜拜一下云哥），实现了二次验证。</p><p>我们需要满足的需求</p><ul><li>员工收到企业微信邀请</li><li>点击跳转到企业微信</li><li>企业微信跳转到我们自定义的信息录入界面</li><li>完成信息录入跳转回企业微信</li></ul><p>话不多说，贴代码<br>本需求的实现采用php+mysql<br>首先掏出我们构造链接的php文档<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reg.php</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">define(&quot;CORPID&quot;,&quot;&quot;);  //企业微信上的设置中的找到这个参数</span><br><span class="line">define(&quot;CORPSECRET&quot;,&quot;&quot;);  //企业微信上的设置-权限管理-应用权限开发者凭据找这个参数</span><br><span class="line">$token_access_url = &quot;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=&quot;.CORPID.&quot;&amp;corpsecret=&quot;.CORPSECRET;</span><br><span class="line"></span><br><span class="line">$res = file_get_contents($token_access_url);</span><br><span class="line">$arr_result = json_decode($res,true);</span><br><span class="line"></span><br><span class="line">define(&quot;ACCESS_TOKEN&quot;,$arr_result[&apos;access_token&apos;]);</span><br><span class="line">define(&quot;CODE&quot;, $_GET[&apos;code&apos;]);</span><br><span class="line">define(&quot;state&quot;,$_GET[&apos;state&apos;]); </span><br><span class="line">$make_menu_url = &quot;https://qyapi.weixin.qq.com/cgi-bin/user/getuserinfo?access_token=&quot;.ACCESS_TOKEN.&quot;&amp;code=&quot;.CODE.&quot;&amp;agentid=0&quot;;</span><br><span class="line">$res2 = file_get_contents($make_menu_url);</span><br><span class="line">$arr_result2 = json_decode($res2,true);</span><br><span class="line">define(&quot;USERID&quot;, $arr_result2[&apos;UserId&apos;]);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"> &lt;meta charset=&quot;UTF-8&quot;&gt;  </span><br><span class="line">    &lt;title&gt;人员信息验证&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;wrapper&quot;&gt;  </span><br><span class="line">         &lt;div class=&quot;container&quot;&gt;  </span><br><span class="line">         &lt;h1&gt;人员信息验证&lt;/h1&gt;  </span><br><span class="line">         &lt;FORM name=&quot;submit&quot;  action=&quot;index.php&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;enter&quot;&gt;</span><br><span class="line">         &lt;input type=&quot;text&quot; placeholder=&quot;工号&quot; name=&apos;username&apos;&gt;  </span><br><span class="line">         &lt;input type=&quot;password&quot; placeholder=&quot;身份证号&quot; name=&apos;pass&apos;&gt;  </span><br><span class="line">         &lt;input type=&quot;hidden&quot; value= &lt;?php echo ACCESS_TOKEN; ?&gt; placeholder=&quot;access_token&quot; name=&apos;access_token&apos;&gt;  </span><br><span class="line">         &lt;input type=&quot;hidden&quot; value=  &lt;?php echo USERID; ?&gt; placeholder=&quot;userid&quot; name=&apos;userid&apos;&gt;  </span><br><span class="line">         &lt;input type=&quot;submit&quot; value=&quot;确认&quot; name=&quot;Submit&quot; class=&quot;btn_submit&quot;&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">         &lt;/FORM&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>此时已经实现了数据绑定跳转到<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">index.php</span><br><span class="line"></span><br><span class="line">&lt;?php   </span><br><span class="line">$emp_no=$_POST[&apos;username&apos;];  </span><br><span class="line">$shengfenzheng=$_POST[&apos;pass&apos;];  </span><br><span class="line">$access_token=$_POST[&apos;access_token&apos;]; </span><br><span class="line">$userid=$_POST[&apos;userid&apos;]; </span><br><span class="line">$link = mysqli_connect(&apos;yourhost&apos;,&apos;&apos;,&apos;&apos;,&apos;database&apos;);  </span><br><span class="line">$query=mysqli_query($link,&quot;insert into wechatqiye(name_id,emp_no)value(&apos;$userid&apos;,&apos;$emp_no&apos;)&quot;);//找到与输入用户名相同的信息，注意要取出的信息有两项  </span><br><span class="line"></span><br><span class="line">if($query)&#123;  </span><br><span class="line">$send_url = &quot;https://qyapi.weixin.qq.com/cgi-bin/user/authsucc?access_token=&quot;.$access_token.&quot;&amp;userid=&quot;.$userid.&quot;&quot;;</span><br><span class="line">  $ch = curl_init();</span><br><span class="line">  curl_setopt($ch, CURLOPT_URL, $send_url);</span><br><span class="line">  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, &quot;GET&quot;);</span><br><span class="line">  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER,FALSE);</span><br><span class="line">  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST,FALSE);</span><br><span class="line">  curl_setopt($ch, CURLOPT_USERAGENT,&apos;Mozilla/5.0 (compatible; MSIE 5.01;Windows NT 5.0)&apos;);</span><br><span class="line">  curl_setopt($ch, CURLOPT_FOLLOWLOCATION,1);</span><br><span class="line">  curl_setopt($ch, CURLOPT_AUTOREFERER,1);</span><br><span class="line"> // curl_setopt($ch, CURLOPT_POSTFIELDS, $userid);</span><br><span class="line">  curl_setopt($ch, CURLOPT_RETURNTRANSFER,true);</span><br><span class="line">  $info = curl_exec($ch);</span><br><span class="line">  if(curl_errno($ch))&#123;</span><br><span class="line">   echo &apos;Errno&apos;.curl_error($ch);</span><br><span class="line">  &#125;</span><br><span class="line">  curl_close($ch);</span><br><span class="line"></span><br><span class="line"> print_r($info);</span><br><span class="line">    echo &quot;&lt;script language=JavaScript&gt;alert(&apos;驗證成功&apos;);&lt;/script&gt;&quot;;    </span><br><span class="line">        &#125; else &#123;</span><br><span class="line">        echo &quot;&lt;script language=JavaScript&gt;alert(&apos;驗證失敗請重新認證&apos;);&lt;/script&gt;&quot;;</span><br><span class="line">       &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>以上</p>]]></content>
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo踩坑指北</title>
      <link href="/2018/03/06/Bug-1/"/>
      <url>/2018/03/06/Bug-1/</url>
      <content type="html"><![CDATA[<p>HEXO在windows上真是不断的坑啊–</p><h2 id="关于多台电脑更新"><a href="#关于多台电脑更新" class="headerlink" title="关于多台电脑更新"></a>关于多台电脑更新</h2><p>之前有写过一篇，最近准备不在公司电脑上写，换到自己电脑上，各种操作过后，出现了及其尴尬的现象。<br><img src="http://upload-images.jianshu.io/upload_images/10826501-5560e79f69494b62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p><p>我特么。。。<br>按照网上各种百度以及stackflow–<br>wtf？？？<br>并不管用好吗？</p><p>诸如<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>诚心诚意的告诉你，并没有卵用</p><p>还有这种<br><img src="http://upload-images.jianshu.io/upload_images/10826501-96099e81e1adfefe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"><br>在你电脑上给git配置环境变量<br>拜托，我都测试过很多遍了，别来坑我了好吗？</p><p>——–华丽的分割线——–<br>下面介绍真正管用的方法<br>首先你要确保你<figure class="highlight plain"><figcaption><span>d -g```这个操作前</span></figcaption><table><tr><td class="code"><pre><span class="line">```_config.yml```文件里</span><br></pre></td></tr></table></figure></p><p>deploy:<br>  type: git<br>  repository:<br>    github: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:TaylorFelix/TaylorFelix.github.io.git<br>    coding: <a href="mailto:git@git.coding.net" target="_blank" rel="noopener">git@git.coding.net</a>:taylorfelix/taylorfelix.coding.me.git<br>  branch: master<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一定配置的要是ssh，别弄的什么https://github之类的</span><br><span class="line"></span><br><span class="line">然后，你需要放弃使用```cmd```，到你根目录，```git bush here</span><br></pre></td></tr></table></figure></p><p>然后执行<code>hexo d -g</code><br>如果你和我一样配置了coding.net<br>中间需要确认一次同步到coding<br>接下来就美滋滋啦<br><img src="http://upload-images.jianshu.io/upload_images/10826501-e87d7b6769f9ee76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></p><p>以上。</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>缺钱</title>
      <link href="/2018/03/02/Whisper-1/"/>
      <url>/2018/03/02/Whisper-1/</url>
      <content type="html"><![CDATA[<p>缺钱就像缺血一样</p><h4 id="犹豫要不要换新电脑"><a href="#犹豫要不要换新电脑" class="headerlink" title="犹豫要不要换新电脑"></a>犹豫要不要换新电脑</h4><p>小米笔记本Air 13.3 i7 256G<br>MacBookPro<br>小米便宜，最近能还清<br>Mac功能强大，太贵<br>难受<br>Fuck!</p>]]></content>
      
      <categories>
          
          <category> Whisper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> money </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IOS开发学习(二)</title>
      <link href="/2018/02/28/IOS-2/"/>
      <url>/2018/02/28/IOS-2/</url>
      <content type="html"><![CDATA[<p>关于运算符与表达式的学习</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>运算符就像动词一样，可以导致变量发生变化</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>常用二元算术运算符，加减乘除 + - * /</p><h2 id="余数运算符"><a href="#余数运算符" class="headerlink" title="余数运算符"></a>余数运算符</h2><p>余数或模(modules)运算符(%)用于计算整数除法的余数。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a = 7;</span><br><span class="line">int b = 3;</span><br><span class="line">int c = a%b;   // c is now 1</span><br></pre></td></tr></table></figure></p><h2 id="递增和递减运算符"><a href="#递增和递减运算符" class="headerlink" title="递增和递减运算符"></a>递增和递减运算符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a++;</span><br><span class="line">++a;</span><br></pre></td></tr></table></figure><p>前缀版本++a在其他任何求值发生前递增a的值，在表达式的余下部分将使用递增后的值。<br>后缀版本a++在其他求值发生之后递增a的值，在表达式的余下部分将使用原来的值。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a = 9;</span><br><span class="line">int b;</span><br><span class="line">b = a++;</span><br><span class="line"></span><br><span class="line">int c = 9;</span><br><span class="line">int d;</span><br><span class="line">d = ++c;</span><br></pre></td></tr></table></figure></p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>理同数学优先级，乘法和除法具有比加法和减法更高的优先级。</p><h2 id="取负运算符"><a href="#取负运算符" class="headerlink" title="取负运算符"></a>取负运算符</h2><p>一元减号用于把一个算术值改为它的负值：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a = 9;</span><br><span class="line">int b;</span><br><span class="line">b = -a;    // b is now -9</span><br></pre></td></tr></table></figure></p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &gt; b  // true, if a is greater than b</span><br><span class="line">a &lt; b  // true, if a is less than b</span><br><span class="line">a &gt;= b // true, if a is greater than or equal to b</span><br><span class="line">a == b // true, if a is equal to b</span><br><span class="line">a != b // true, if a is not equal to b</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>C语言使用<strong>短路求值法</strong>。表达式从左到右求值。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ( b &lt; a &amp;&amp; CheckSomething () )</span><br><span class="line">  &#123;</span><br><span class="line">     ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="逻辑“非”运算符"><a href="#逻辑“非”运算符" class="headerlink" title="逻辑“非”运算符"></a>逻辑“非”运算符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = ! expression;</span><br></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = b;</span><br></pre></td></tr></table></figure><p>把b的值赋予a。当然，a必须能够被赋值。可以赋值的实体称为<strong>左值</strong>，因为它们出现在赋值运算符的左边。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* set up */</span><br><span class="line">float a;</span><br><span class="line">float b[100];</span><br><span class="line">float *c;</span><br><span class="line">struct dailyTemperatures today;</span><br><span class="line">struct dailyTemperatures *todayPtr;</span><br><span class="line">c = &amp;a;</span><br><span class="line">todayPtr = &amp;today;</span><br><span class="line"></span><br><span class="line">/* legal lvalues */</span><br><span class="line">a = 76;</span><br><span class="line">b[0] = 76;</span><br><span class="line">*c = 76;</span><br><span class="line">today.high = 76;</span><br><span class="line">todayPtr-&gt;high = 76;</span><br></pre></td></tr></table></figure></p><h2 id="转换和强制转换"><a href="#转换和强制转换" class="headerlink" title="转换和强制转换"></a>转换和强制转换</h2><p>通过使用强制转换，强制编译器会把变量的值转换成一种不同的类型。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a = 6;</span><br><span class="line">int b = 4;</span><br><span class="line">float c, d;</span><br><span class="line">c = a / b;</span><br><span class="line">d = ( float )a / ( float )b;</span><br></pre></td></tr></table></figure></p><p>float强制转换令强制编译器把a和b转换成float类型，并执行浮点型除法运算。</p><h2 id="其他赋值运算符"><a href="#其他赋值运算符" class="headerlink" title="其他赋值运算符"></a>其他赋值运算符</h2><p>C语言还具有结合了算术和赋值运算的简写运算符：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a += b;    等价于 a = a + b;</span><br><span class="line">a -= b;    等价于 a = a - b;</span><br><span class="line">a *= b;    等价于 a = a* b;</span><br><span class="line">a /= b;    等价于 a = a/ b;</span><br></pre></td></tr></table></figure></p><h1 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h1><p>C语言中的表达式和语句大致相当于自然语言中的短句和句子。</p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>最简单的表达式只有一个常量或变量：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">14</span><br><span class="line">bananasPerBunch</span><br></pre></td></tr></table></figure></p><p>每个表达式都有一个值。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">j + 14</span><br><span class="line">a &lt; b</span><br><span class="line">distance = rate * time</span><br></pre></td></tr></table></figure></p><p>算术或逻辑表达式的值就是通过执行算术或逻辑运算所得到的任何值。赋值表达式的值就是赋予作为赋值目标的变量的值。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SomeFunction()</span><br></pre></td></tr></table></figure></p><p>函数调用表达式的值是该函数的返回值。</p><h2 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h2><p>编译器遇到表达式，创建二进制代码，用于计算表达式并求出它的值。</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>末尾添加分号;，变成语句。</p><h2 id="复合语句"><a href="#复合语句" class="headerlink" title="复合语句"></a>复合语句</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  timeDelta = time2 - time1;</span><br><span class="line">  distanceDelta = distance2 - distance1;</span><br><span class="line">  averageSpeed = distanceDelta / timeDelta;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>闭大括号后面没有分号。这种语句称为复合语句。</p>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo多电脑更新博客</title>
      <link href="/2018/02/28/Git-2/"/>
      <url>/2018/02/28/Git-2/</url>
      <content type="html"><![CDATA[<p>解决Hexo多电脑更新博客内容</p><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h4><p>首先确保自己已经使用hexo在github搭建好了自己的个人博客，github仓库中如下图显示：</p><p><img src="http://upload-images.jianshu.io/upload_images/10826501-3908ebdad815fde9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="0.png"></p><h4 id="2-对username-github-io仓库新建hexo分支，并克隆"><a href="#2-对username-github-io仓库新建hexo分支，并克隆" class="headerlink" title="2.对username.github.io仓库新建hexo分支，并克隆"></a>2.对username.github.io仓库新建hexo分支，并克隆</h4><p>在Github的username.github.io仓库上新建一个xxx分支，并切换到该分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为xxx，save保存；然后将该仓库克隆到本地，进入该username.github.io文件目录。</p><p><img src="http://upload-images.jianshu.io/upload_images/10826501-c3ce7f59bba56d26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/10826501-c4bc5e6ec4ed1a63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></p><p>完成上面步骤后，在当前目录使用Git Bash执行<code>git branch</code>命令查看当前所在分支，应为新建的分支xxx：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">*hexo</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/10826501-e5d732ed37ac7523.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.png"></p><h4 id="3-将本地博客的部署文件拷贝进username-github-io文件目录"><a href="#3-将本地博客的部署文件拷贝进username-github-io文件目录" class="headerlink" title="3.将本地博客的部署文件拷贝进username.github.io文件目录"></a>3.将本地博客的部署文件拷贝进username.github.io文件目录</h4><p>如题，先将本地博客的部署文件（<strong>Hexo目录下的全部文件</strong>）全部拷贝进username.github.io文件目录中去。</p><p>接下来，进入username.github.io文件目录下，将该目录下的全部文件提交到xxx分支，提交之前需注意：</p><blockquote><ul><li>将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。</li><li>可能有人会问，删除了themes目录中的.git不就不能<code>git pull</code>更新主题了吗，很简单，需要更新主题时在另一个地方<code>git clone</code>下来该主题的最新版本，然后将内容拷到当前主题目录即可</li></ul></blockquote><h4 id="4-提交hexo分支"><a href="#4-提交hexo分支" class="headerlink" title="4.提交hexo分支"></a>4.提交hexo分支</h4><p>执行<code>git add .</code>、<code>git commit -m &#39;back up hexo files&#39;</code>（引号内容可改）、<code>git push</code>即可将博客的hexo部署环境提交到GitHub个人仓库的xxx分支。</p><p>master分支和xxx分支各自保存着一个版本，master分支用于保存博客静态资源，提供博客页面供人访问；xxx分支用于备份博客部署文件，供自己维护更新，两者在一个GitHub仓库内互不冲突，完美！</p><h4 id="5-宿舍自己的电脑"><a href="#5-宿舍自己的电脑" class="headerlink" title="5.宿舍自己的电脑"></a>5.宿舍自己的电脑</h4><p>至此，你的博客已经可以在其他电脑上进行同步的维护和更新了，方法很简单：</p><blockquote><ul><li>将新电脑的生成的ssh key添加到GitHub账户上</li><li>在新电脑上克隆username.github.io仓库的xxx分支到本地，此时本地git仓库处于xxx分支</li><li>切换到username.github.io目录，执行<code>npm install</code>(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)</li></ul></blockquote><p>到这里了就可以开始在自己的电脑上写博客了！</p><blockquote><ul><li>编辑、撰写文章或其他博客更新改动</li><li>依次执行<code>git add .</code>、<code>git commit -m &#39;back up hexo files&#39;</code>（引号内容可改）、<code>git push</code>指令，保证xxx分支版本最新</li><li>执行<code>hexo d -g</code>指令（在此之前，有时可能需要执行<code>hexo clean</code>），完成后就会发现，最新改动已经更新到master分支了，两个分支互不干扰！</li></ul></blockquote><h4 id="6-原主电脑"><a href="#6-原主电脑" class="headerlink" title="6.原主电脑"></a>6.原主电脑</h4><blockquote><p><strong> 注意： 每次换电脑进行博客更新时，不管上次在其他电脑有没有更新，最好先<code>git pull</code></strong></p></blockquote><p>按照之前的方法写自己博客，<br>然后将目录切换下username.github.io下，此时需要安装一下<code>npm install</code>，<br>最后执行<code>hexo g</code>、<code>hexo s</code>、<code>hexo d</code>等命令即可提交成功</p>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IOS开发学习(一)</title>
      <link href="/2018/02/26/IOS-1/"/>
      <url>/2018/02/26/IOS-1/</url>
      <content type="html"><![CDATA[<p>C程序的结构与变量</p><h1 id="IOS开发学习"><a href="#IOS开发学习" class="headerlink" title="IOS开发学习"></a>IOS开发学习</h1><p>新的起点</p><h1 id="C程序的结构"><a href="#C程序的结构" class="headerlink" title="C程序的结构"></a>C程序的结构</h1><h2 id="main例程"><a href="#main例程" class="headerlink" title="main例程"></a>main例程</h2><p>所有c程序都有一个main例程。在OS加载第一个C程序后，程序开始执行main例程中的第一行代码。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main(int argc, const char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关键特性包括:</p><ol><li>第一行上的指导int提升main给OS返回一个整形值，作为返回代码</li><li>main是必需的</li><li>main接收argc个参数，存储在数组argv中</li><li>return 0; 指示将0作为返回代码传给OS<br>简化形式：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main (void)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>语句用分号;终止</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>经典注释<pre>//</pre><br>封闭注释<pre>/**/</pre></p><h2 id="变量和函数名称"><a href="#变量和函数名称" class="headerlink" title="变量和函数名称"></a>变量和函数名称</h2><p>首字符采用下划线或字母<br>以下划线开头的名称传统上用于打算设置为私有的或者供内部使用的变量和函数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_privateVariable</span><br></pre></td></tr></table></figure></p><p>名称区分大小写，且不能有任何空白<br>驼峰式命名方式</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>朴素的C程序代码放在一个或多个拓展名为<strong>.c</strong>的文件中<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ACProgram.c</span><br></pre></td></tr></table></figure></p><p>使用Object-C对象的代码放在一个或多个拓展名为<strong>.m</strong>的文件中<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AnObjectiveProgram.m</span><br></pre></td></tr></table></figure></p><p>C程序还使用头文件，头文件通常包含可以被许多.c和.m文件共享的多种定义。通过使用#include或#import预处理指令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AHeaderFile.h</span><br></pre></td></tr></table></figure></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量声明形式如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">variabletype name;</span><br></pre></td></tr></table></figure></p><p>C语言允许在单个声明中声明多个变量：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">variabletype name1,name2,name3;</span><br></pre></td></tr></table></figure></p><h2 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h2><p>C语言提供了以下类型用于保存整数：char、short、int、long、long long.<br>可以把整形声明为unsigned:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unsigned char a;</span><br><span class="line">unsigned short b;</span><br><span class="line">unsigned int c;</span><br><span class="line">unsigned long d;</span><br><span class="line">unsigned long long e;</span><br></pre></td></tr></table></figure></p><p>单独使用unsigned时，意指 unsigned int:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unsigned a;   // a is an unsigned int</span><br></pre></td></tr></table></figure></p><p>unsinged通常赋值为正数。</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>浮点型是float、double、long double<br>浮点值总是带符号的<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">float aFloat;</span><br><span class="line">double aDouble;</span><br><span class="line">long double aLongDouble;</span><br></pre></td></tr></table></figure></p><h2 id="真值"><a href="#真值" class="headerlink" title="真值"></a>真值</h2><p>普通的表达式通常用于真值。求值为0的表达式被视为“假”，而求值为非0的表达式视为“真”</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>可以在声明变量时初始化它们：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a=9;</span><br><span class="line">int b=2*4;</span><br><span class="line">float c=3.14159;</span><br><span class="line">char d=&apos;a&apos;;</span><br></pre></td></tr></table></figure></p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>指针是其值为一个内存地址的变量。它“指向”内存中的某个位置。<br>声明一个指针，在变量名称前面放置一个*<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int *pointerVar;</span><br></pre></td></tr></table></figure></p><p><strong>泛型指针</strong><br>如果一个变量被声明为指向void的指针，那它成为泛型指针。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a=9;</span><br><span class="line">int b;</span><br><span class="line">void *genericPointer;</span><br><span class="line">genericPointer = &amp;a;</span><br><span class="line">b = *(( int *) genericPointer );</span><br></pre></td></tr></table></figure></p><p>上例使用强制转换运算符(int *)强制编译器把genericPointer视作一个指向整数的指针。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>C数组是同类型元素的有序集合。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a[100];</span><br></pre></td></tr></table></figure></p><p>通过下面的方式访问各个元素<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a [6] = 9;</span><br></pre></td></tr></table></figure></p><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>声明方式如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int b[4][10];</span><br></pre></td></tr></table></figure></p><p>多维数组以线性方式逐行存储在内存中。<br>使用指针表示法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b[i][j]</span><br></pre></td></tr></table></figure></p><p>可能写作：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*(b+i*10+j)</span><br></pre></td></tr></table></figure></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>C语言的字符串是字节的一维数组，并利用0字节终止。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char *aString =&quot;Hello&quot;;</span><br><span class="line">aString = &quot;World&quot;;</span><br></pre></td></tr></table></figure></p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>结构可以成为单个实体的相关变量的集合。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct dailyTemperatures</span><br><span class="line">&#123;</span><br><span class="line">  float high;</span><br><span class="line">  float low;</span><br><span class="line">  int year;</span><br><span class="line">  int dayOfYear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结构中各个变量称为成员变量。<br>关键字struct后面的名称是结构标签。<br>结构可以具有其他结构作为成员。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct hiLow</span><br><span class="line">&#123;</span><br><span class="line">  float high;</span><br><span class="line">  float low;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct dailyTemperatures</span><br><span class="line">&#123;</span><br><span class="line">  struct hiLow tempExtremes;</span><br><span class="line">  int year;</span><br><span class="line">  int dayOfYear;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这样，设置today的高温将如下显示<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct dailyTemperatures today;</span><br><span class="line">today.tempExtremes.high=68.0;</span><br></pre></td></tr></table></figure></p><h2 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h2><p>typedef声明提供了一种用于为变量类型创建别名的方式：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef float Temperature;</span><br></pre></td></tr></table></figure></p><p>Temperature可用于声明变量，就像它是内置的类型之一一样：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Temperature high,low;</span><br></pre></td></tr></table></figure></p><h2 id="枚举常量"><a href="#枚举常量" class="headerlink" title="枚举常量"></a>枚举常量</h2><p>enum语句允许定义一组整形常量：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enum woodwind &#123; oboe,flute,clarinet,bassoon &#125;;</span><br></pre></td></tr></table></figure></p><p>上句的结果是：obue、flute、clarinet、bassoon分别是值为0、1、2、3的常量。<br>enum后面的名称成为枚举标签。</p>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>评论功能上线啦！</title>
      <link href="/2018/02/26/Blog-1/"/>
      <url>/2018/02/26/Blog-1/</url>
      <content type="html"><![CDATA[<p>评论功能的实现效果</p><h2 id="评论及流量采集已上线"><a href="#评论及流量采集已上线" class="headerlink" title="评论及流量采集已上线"></a>评论及流量采集已上线</h2><hr><p>经过反复测试及部分崩坏，终于搞定了评论功能，先说一下评论需求开始的考量。</p><p>以下个人说法仅经过material主题测试。</p><hr><p> <strong>1. Disqus</strong><br> 国外评论系统，需科学上网，pass</p><hr><p> <strong>2. 畅言</strong><br> 域名需备案，暂时pass</p><hr><p> <strong>3. 来必利</strong><br> 韩国人开发的评论系统，测试着用了一下，先说安装方法吧。</p><ol><li>注册来必利账号</li><li>进入账号后台</li><li>点击代码管理</li><li>拷贝data-uid=”此处未需要拷贝的内容”&gt;</li><li>进入主题内的_config.yml配置文件</li><li>将comment: use:后改为livere</li><li>添加livere_data_uid:在后加入复制内容</li></ol><p>以上功能请务必<strong>确保_widget/comment/下有livere</strong>这个文件夹</p><p>接下来说一下这个评论系统的尴尬之处</p><ol><li>在refer处添加的评论系统，加载速度感人</li><li>评论必须登录第三方账号，游客类型恐怕留言兴趣都没有（哪有游客？不存在的）</li><li>丑</li></ol><hr><p> <strong>4. valine</strong></p><p> 主人公登场！<br> 这个评论系统应该是我个人感觉最满意的！<br> 无需登录！界面简洁！流量记录！<br> 迫不及待的安利起来了</p><ol><li>注册leancloud账号</li><li>进入控制台</li><li>创建应用（默认JavaScript SDK）</li><li>创建class，名称为Counter</li><li><strong>ACL权限必须无限制</strong></li><li>进入主题内的_config.yml配置文件</li><li>将comment: use:后改为valine</li><li>添加valine_leancloud_appId和valine_leancloud_appKey</li><li>appId和appKey在leancloud设置-应用key里可以找到</li><li>顺便添加流量采集与流量分析</li><li>修改leadcloud enable:true（默认为false）</li><li>配置app_id与app_key，与valine一致。</li></ol><p>以上功能请务必<strong>确保_widget/comment/下有valine</strong>这个文件夹</p><hr><p>至此博客评论及流量采集已经完成，撒花~~~</p><p>作者 Felix<br>2018 年 02月 26日    </p>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Valine </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记一次Hexo同时部署GitHub和Coding</title>
      <link href="/2018/02/26/Blog-2/"/>
      <url>/2018/02/26/Blog-2/</url>
      <content type="html"><![CDATA[<p>如何优化加载速度与部署问题</p><h2 id="Hexo同时部署GitHub和Coding"><a href="#Hexo同时部署GitHub和Coding" class="headerlink" title="Hexo同时部署GitHub和Coding"></a>Hexo同时部署GitHub和Coding</h2><hr><p>GitHub加载速度实在是太慢了，静态资源加载可以说是等一年–<br>参考部分大佬优化加载的方式，最后选择了coding<br>这是原博<a href="http://gaomf.cn/2015/11/01/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6/" target="_blank" rel="noopener">Hexo博客优化加载速度</a></p><p> <strong>首先需要注册一个coding账号</strong><br> 傻瓜式操作不再多加说明</p><p> <strong>创建新项目</strong><br> 点击创建新项目，项目名称一定要是 <strong>你的用户名+coding.me</strong><br> 例如：taylorfelix.coding.me</p><p> <strong>点击Page服务</strong><br> 静态page-部署来源-master</p><p> <strong>部署ssh</strong><br> 点击部署公钥，添加ssh-rsa<br> 此处ssh应与github部署的ssh一致</p><p> 此处已完成coding所有配置</p><p> <strong>修改Hexo根目录_config.yml文件</strong><br> 直接拉到最底部，在deploy处配置<br> <pre>deploy:<br> type: git<br> repository:<br>   github: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:TaylorFelix/TaylorFelix.github.io.git<br>   coding: <a href="mailto:git@git.coding.net" target="_blank" rel="noopener">git@git.coding.net</a>:taylorfelix/taylorfelix.coding.me.git<br> branch: master</pre><br> 此处每个：后应空一格</p><p> <strong>配置完成开始部署</strong><br> 打开cmd（此处对于windows而言）,到你的项目目录<br> <pre>hexo d -g</pre><br> 完成部署</p><hr><p>作者 Felix<br>2018 年 02月 26日    </p>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用命令采集</title>
      <link href="/2018/02/24/Git-1/"/>
      <url>/2018/02/24/Git-1/</url>
      <content type="html"><![CDATA[<p>一些常用的Git指令</p><h2 id="常用指令采集"><a href="#常用指令采集" class="headerlink" title="常用指令采集"></a>常用指令采集</h2><hr><p><strong>Hexo与Git库同步（本地同步至git）</strong></p><pre>hexo d -g</pre><hr><p><strong>Hexo运行测试预览</strong></p><pre>hexo s</pre><hr><p><strong>GitHub同步指令集</strong></p><p><pre>git init</pre></p><p><pre>git add .</pre></p><p><pre>git commit -m “此处为项目说明”</pre></p><p><pre>git remote add origin 远程库地址</pre><br>   此处为关联远程数据库</p><p><pre>git pull –rebase origin master</pre><br>此处为远程库与本地同步合并（若远程库不为空一定要做这一步）</p><p><pre>git -u origin master</pre><br>内容推送到远程（之后开始验证然后上传）</p><p><pre>git status</pre><br>状态查询</p><hr><p><strong>Git常用命令</strong><br>生成.ssh文件</p><p><pre>ssh-keygen -t rsa -C “<a href="mailto:1023614047@qq.com" target="_blank" rel="noopener">1023614047@qq.com</a>“</pre><br>判断是否在本机配置远程连接成功</p><p><pre>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></pre><br>删除远程仓库</p><p><pre>git remote rm origin</pre><br>更新本地仓库到github</p><p><pre>git push -u origin master</pre><br>将文件夹下所有文件添加到版本库</p><hr><p>作者 Felix<br>2018 年 02月 24日    </p>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>产线环境体验</title>
      <link href="/2018/02/24/Work-1/"/>
      <url>/2018/02/24/Work-1/</url>
      <content type="html"><![CDATA[<p>各在其位，各司其职</p><h2 id="初体验厂企生产流程"><a href="#初体验厂企生产流程" class="headerlink" title="初体验厂企生产流程"></a>初体验厂企生产流程</h2><p>今天得有机会看了下产线的生产流程，伴随着浓厚的化学气味，走完了部分产线，可能是刚刚开工的缘故，部分产线员工稀少，有的已经满员。<br>虽然只是一次以围观者和学习者的心态走过产线，还是会有些个人感触，以下仅代表个人观点，不喜请忘。</p><hr><ol><li>真是忙的忙死，闲的闲死</li><li>科学技术是第一生产力（认真脸）</li><li>化工产品对身体危害真的很大</li><li>庆幸自己非产线人员（非歧视）</li></ol><hr><p>大致感受也不会太多，仅此而已</p><p>作者 Felix<br>2018 年 02月 24日    </p>]]></content>
      
      <categories>
          
          <category> Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Work </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>你好，Blog</title>
      <link href="/2018/02/23/Hello/"/>
      <url>/2018/02/23/Hello/</url>
      <content type="html"><![CDATA[<p>将碎片化时间利用起来</p><h1 id="新的起点"><a href="#新的起点" class="headerlink" title="新的起点"></a>新的起点</h1><hr><p>一个崭新的世界，开始在闲暇之余记录自己每天的生活，以下是自己的2018个人目标：</p><blockquote><ul><li>充实自己，完成公司内自己应尽的职责</li><li>发布日记，杂文，所见所想</li><li>撰写发布技术文稿（代码支持）</li><li>多接触了解新的知识</li></ul></blockquote><h3 id="无限折腾"><a href="#无限折腾" class="headerlink" title="无限折腾"></a>无限折腾</h3><blockquote><p>趁着刚刚毕业时间充足，争取把自己以往所有想过但未实现的都一一实现，每一天都是新的开始</p></blockquote><hr><h2 id="关于技术栈"><a href="#关于技术栈" class="headerlink" title="关于技术栈"></a>关于技术栈</h2><p>希望自己能在技术方面越走越远吧！<br><strong>JAVA</strong>，<strong>PHP</strong>，<strong>PYTHON</strong>，<strong>JavaScript</strong></p><h3 id="以下是目前博客搭建计划表"><a href="#以下是目前博客搭建计划表" class="headerlink" title="以下是目前博客搭建计划表"></a>以下是目前博客搭建计划表</h3><ul><li style="list-style: none"><input type="checkbox" checked> MarkDown深入研究</li><li style="list-style: none"><input type="checkbox" checked> GitHub实时同步</li><li style="list-style: none"><input type="checkbox" checked> 添加评论功能</li><li style="list-style: none"><input type="checkbox"> 个人域名备案</li><li style="list-style: none"><input type="checkbox"> 技术翻新Vuejs</li></ul><hr><p>再一次感谢您花费时间阅读这份欢迎稿</p><p>作者 Felix<br>2018 年 02月 23日    </p>]]></content>
      
      <categories>
          
          <category> Whisper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Whisper </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
